---
// Importar las funciones de la sesión y las utilidades de la base de datos.
import { getSession } from "auth-astro/server";
import { getUserByEmail, getUrlsFromUser } from "../components/utils/db";

// Importar el componente visual Layout y el icono de flecha hacia atrás.
import Layout from "../layouts/Layout.astro";
import ArrowBack from "../components/icons/ArrowBack.astro";

/**
 * Obtiene la sesión del usuario actual.
 * @param request La solicitud de Astro.
 * @returns La sesión del usuario actual.
 */
const session = await getSession(Astro.request);

/**
 * Establece el título y el mensaje principal en función de si el usuario 
 * está autenticado.
 */
const h1 = session
  ? `URLs acortadas de ${session.user?.name?.split(' ')[0]}`
  : 'Inicia sesión para ver tus URLs acortadas';

/**
 * Almacena las URLs acortadas del usuario actual.
 */
let urls: {
  url: string;
  code: string;
}[] = [];

/**
 * Si el usuario está autenticado y se puede obtener su correo electrónico,
 * se intenta obtener las URLs acortadas asociadas con ese usuario.
 */
if (session && session.user?.email) {
  const user = await getUserByEmail(session.user.email);

  if (user.success && user.data) {
    const urlsRes = await getUrlsFromUser(user.data?.id);

    if (urlsRes.success && urlsRes.data) {
      urls = urlsRes.data.map(url => url);
    }
  }
}
---

/**
 * Renderiza la página de "Mis URLs" utilizando el componente Layout.
 */
<Layout title="Mis URLs">
  <a href="/">
    <ArrowBack class="icon" />
    Ir al inicio
  </a>
  <h1>{h1}</h1>
  <ul>
    {urls.map(url => (
      <li>
        <span>{url.url}</span>
        <button value={url.code} class="copy-shortened-url">Copiar URL</button>
      </li>
    ))}
  </ul>
</Layout>

/**
 * Estilos CSS para la página.
 */
<style>
  .icon {
    width: 2rem;
    stroke: white;
    transition: 0.2s;
  }

  h1 {
    margin-top: 2rem;
    margin-bottom: 5rem;
  }
  
  a {
    color: white;
    text-decoration: none;
    transition: 0.2s;
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }
  
  a:hover,
  a:hover .icon {
    color: gray;
    stroke: gray;
  }

  ul {
    list-style: none;
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }

  li {
    display: flex;
    justify-content: space-between;
  }

  button {
    background-color: #088f62;
    border: none;
    color: white;
    padding: 0.6rem;
    cursor: pointer;
    font-size: 14px;
    border-radius: 5px;
    transition: background-color 0.2s;
  }

  button:hover {
    background-color: #3fd690;
  }
</style>

 /**
 * Maneja el evento click en los botones de copiar URL.
 */
<script>
  // Importa la función toast de Sonner para mostrar notificaciones.
  import { toast } from 'sonner';

  // Obtiene la URL base del sitio web
  const url = window.location.origin;

  // Obtiene todos los elementos con la clase 'copy-shortened-url' y 
  // los almacena en copyShortenedUrl
  const copyShortenedUrl = document.getElementsByClassName(
    'copy-shortened-url') as HTMLCollectionOf<HTMLButtonElement>;

  // Verifica si existen elementos con la clase 'copy-shortened-url'
  if (copyShortenedUrl) {
    // Itera sobre cada botón encontrado
    for (const button of copyShortenedUrl) {
      // Asigna una función al evento click de cada botón
      button.onclick = (e) => {
        // @ts-ignore
        // Verifica si el botón tiene un valor asociado
        if (!e.target?.value) return;

        try {
          // @ts-ignore
          // Copia la URL acortada al portapapeles del usuario
          window.navigator.clipboard.writeText(`${url}/${e.target.value}`);

          // Muestra una notificación de éxito
          toast.success('URL copiada al portapapeles!');
          
        } catch {
          // En caso de error, muestra una notificación de error
          toast.error('No se pudo copiar la URL al portapapeles');
        }
      };
    }
  }
</script>
